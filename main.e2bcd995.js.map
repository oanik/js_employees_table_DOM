{"version":3,"sources":["scripts/sortFunc.js","scripts/tableEdit.js","scripts/form.js","scripts/main.js"],"names":["compareValues","a","b","element1","innerText","replace","element2","operand1","parseFloat","operand2","isNaN","localeCompare","sortFunction","cellInx","callback","rowsCollection","flag","count","indx","length","cells","after","cellData","callbackFunc","e","key","type","elem","path","parentElement","input","inputData","value","innerHTML","removeEventListener","editTable","element","target","matches","document","createElement","className","append","addEventListener","createForm","arrayOfFields","form","id","map","item","join","body","label","select","setAttribute","arrayOfCities","children","before","elements","showNotification","message","div","classList","toggle","setTimeout","remove","validateForm","currentField","validateInput","name","field","pattern","check","search","num","parseInt","getDataFromFrom","data","objectFromForm","Object","fromEntries","entries","prop","tempArray","tempString","split","charAt","toUpperCase","slice","Number","toLocaleString","appendNewRow","table","querySelector","transformedObjData","FormData","ObjDataArray","values","newRow","rows","cloneNode","cell","processForm","preventDefault","call","mainForm","getEvent","clickCheck","cellIndex","closest","clicked"],"mappings":"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","file":"main.e2bcd995.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst compareValues = (a, b) => {\n  const element1 = (a.innerText).replace(/\\$/g, '');\n  const element2 = (b.innerText).replace(/\\$/g, '');\n  const operand1 = parseFloat(element1.replace(/,/g, ''));\n  const operand2 = parseFloat(element2.replace(/,/g, ''));\n\n  if (!isNaN(operand1) && !isNaN(operand2)) {\n    if (operand1 === operand2) {\n      return 0;\n    }\n\n    return operand1 > operand2 ? 1 : -1;\n  } else {\n    return (a.innerText.localeCompare(b.innerText));\n  }\n};\n\nconst sortFunction = function(cellInx, callback, rowsCollection, flag) {\n  let count;\n\n  do {\n    count = 0;\n\n    for (let indx = 2; indx < rowsCollection.length - 1; indx++) {\n      const a = rowsCollection[indx - 1].cells[cellInx];\n      const b = rowsCollection[indx].cells[cellInx];\n\n      if (callback(a, b) > 0 && flag === false) {\n        rowsCollection[indx].after(rowsCollection[indx - 1]);\n        count++;\n      }\n\n      if ((callback(a, b) < 0) && flag === true) {\n        rowsCollection[indx].after(rowsCollection[indx - 1]);\n        count++;\n      }\n    }\n  } while (count > 0);\n};\n\nexport {compareValues, sortFunction};","'use strict';\nlet cellData;\nfunction callbackFunc(e) {\n  if (e.key !== 'Enter' && e.type !== 'focusout') {\n    return;\n  }\n\n  const elem = e.path[0].parentElement;\n  const input = e.path[0];\n  const inputData = e.path[0].value;\n\n  elem.innerHTML = inputData;\n\n  if (inputData === '') {\n    elem.innerHTML = cellData;\n  }\n\n  return (e.type === 'focusout')\n    ? input.removeEventListener('keydown', callbackFunc)\n    : input.removeEventListener('focusout', callbackFunc);\n};\n\nconst editTable = function(e) {\n  const element = e.target;\n\n  if (element.matches('td')) {\n    const input = document.createElement('input');\n\n    input.className = 'cell-input';\n    input.type = 'text';\n    cellData = element.innerText;\n    element.innerHTML = '';\n    element.append(input);\n\n    input.addEventListener('keydown', callbackFunc);\n    input.addEventListener('focusout', callbackFunc);\n  }\n};\nexport { editTable };","'use strict';\n\nconst createForm = function(className) {\n    const arrayOfFields = ['Name', 'Position', 'Age', 'Salary'];\n    const arrayOfCities = ['Tokyo', 'Singapore', 'London',\n      'New York', 'Edinburgh', 'San Francisco'];\n    const form = document.createElement('form');\n  \n    form.className = className;\n    form.id = 'mainForm';\n  \n    form.innerHTML = `${arrayOfFields.map(item =>\n      `<label>\n       ${item}: <input name='${item}'>\n       </label>`).join('')} \n      <button>Save to table</button>`;\n  \n    document.body.append(form);\n  \n    const label = document.createElement('label');\n    const select = document.createElement('select');\n  \n    select.setAttribute('name', 'Office');\n  \n    select.innerHTML = `${arrayOfCities.map(item =>\n      `<option value=\"${item}\">\n          ${item}\n          </option>`)}`;\n    label.innerHTML = 'Office:';\n    label.append(select);\n    form.children[2].before(label);\n    form.elements[3].setAttribute('type', 'number');\n    form.elements[4].setAttribute('type', 'number');\n  \n    return form;\n};\n\nconst showNotification = function(type, message) {\n    const div = document.createElement('div');\n    div.innerHTML = `<h2 class=\".title\">\n    Notification<p>${message}</p></h2>`;\n    div.className = 'notification';\n    div.classList.toggle(type);\n\n    document.body.append(div);\n\n    setTimeout(() => { \n        div.remove();\n     }, 2000);\n};\n\nconst validateForm = function() {\n    let message;\n\n    for (let indx = 0; indx < this.elements.length; indx++) {\n    const currentField = this.elements[indx];\n\n        if (currentField.type !== 'text' && currentField.type !== 'number') {\n            continue;\n        }\n\n        const flag = validateInput(currentField);\n\n        if (flag === -1) {\n            message = `Error! Wrong input in \n                \"${currentField.name}\" field. Check your input!`;\n            showNotification('error', message);\n\n            return false;\n        }\n    }\n    message = `Success! All data is correct! Adding row to the table!`;\n    showNotification('success', message);\n\n    return true;\n};\n\nconst validateInput = function(field) {\n    let pattern, value, check;\n    \n    switch (field.name) {\n        case 'Name':\n        case 'Position':\n            pattern = /^([a-zA-Zа-яёA-ЯË\\s]){4,}$/;\n            value = field.value;\n            check = value.search(pattern);\n            break;\n        case 'Age':\n            value = field.value;\n            const num = parseInt(value);\n\n            check = (!(num >= 18 && num <= 90)) ? -1 : 0;\n            break;\n        case 'Salary':\n            value = field.value;\n             check = (!value.length) ? -1 : 0;\n            break;\n    }\n\n    return check;\n};\n\nconst getDataFromFrom = function(data) {\n    const objectFromForm = Object.fromEntries(data.entries());\n\n    for (const prop in objectFromForm) {\n         if (prop === 'Name' || prop === 'Position') {\n            const tempArray = objectFromForm[prop].split(' ');\n            const tempString = tempArray.map(element => {\n                return element.charAt(0).toUpperCase() + element.slice(1);\n            });\n\n            objectFromForm[prop] = tempString.join(' ');\n        }\n\n        if (prop === 'Salary') {\n            objectFromForm[prop] = `$\n            ${Number(objectFromForm[prop]).toLocaleString()}`;\n        }\n    }\n\n    return objectFromForm;\n};\n\nconst appendNewRow = function(form, callback) {\n    const table = document.querySelector('table');\n    const formDataObj = new FormData(form);\n    const transformedObjData = callback(formDataObj);\n    const ObjDataArray = Object.values(transformedObjData);\n    const newRow = table.rows[1].cloneNode(true);\n\n    for (let cell = 0; cell < newRow.cells.length; cell++) {\n        newRow.cells[cell].innerHTML = ObjDataArray[cell];\n    }\n    table.append(newRow);\n};\n\nconst processForm = function(e) {\n    e.preventDefault();\n  \n    if (!validateForm.call(this)) {\n      return;\n    };\n  \n    appendNewRow(mainForm, getDataFromFrom);\n   \n    for (let indx = 0; indx <mainForm.elements.length; indx++){\n        if (mainForm.elements[indx].type === 'text' || mainForm.elements[indx].type === 'number'){\n            mainForm.elements[indx].value = '';\n        }\n    }\n};\n\nconst mainForm = createForm('new-employee-form');\n\nexport { processForm };","'use strict';\nimport { compareValues, sortFunction} from './sortFunc.js'\nimport { editTable } from './tableEdit.js'\nimport { processForm } from './form.js'\n\nconst getEvent = function() {\n  let clickCheck = false;\n\n  return function(e) {\n    const element = e.target;\n\n    if (element.matches('th')) {\n      const rows = table.rows;\n      const cellIndex = element.cellIndex;\n\n      sortFunction(cellIndex, compareValues, rows, clickCheck);\n      clickCheck = !clickCheck;\n    } else if (element.closest('tr')) {\n      element.classList.toggle('active');\n    }\n  };\n};\n\nconst clicked = getEvent();\nconst table = document.querySelector('table');\n\ntable.addEventListener('click', clicked);\nmainForm.addEventListener('submit', processForm);\ntable.addEventListener('dblclick', editTable);\n"]}